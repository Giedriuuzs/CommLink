{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { List, Provider as PaperProvider, Switch } from \"react-native-paper\";\nimport colors from \"../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CommLiveData = function (_Component) {\n  _inherits(CommLiveData, _Component);\n\n  var _super = _createSuper(CommLiveData);\n\n  function CommLiveData(props) {\n    var _this;\n\n    _classCallCheck(this, CommLiveData);\n\n    _this = _super.call(this, props);\n\n    _this.onToggleSwitch = function () {\n      _this.setState({\n        isSwitchOn: !_this.state.isSwitchOn\n      });\n    };\n\n    _this.componentDidMount = function () {\n      _this.setState({\n        isSwitchOn: _this.props.row.active\n      });\n\n      _this.props.connection.on(\"ReceiveCommLastData\", function (o) {\n        console.log(o);\n\n        _this.setState({\n          data: JSON.parse(o)\n        });\n      });\n\n      _this.props.connection.on(\"newData\", function (str, analyzerID) {\n        console.log(str + \";  \" + analyzerID);\n\n        if (_this.props.row.analyzerID == analyzerID) {\n          var data2 = _this.state.data;\n          data2.push(str);\n\n          _this.setState({\n            data: data2\n          });\n        }\n      });\n\n      _this.state.refreshing = false;\n    };\n\n    _this.state = {\n      data: [],\n      refreshing: true,\n      isSwitchOn: false\n    };\n    return _this;\n  }\n\n  _createClass(CommLiveData, [{\n    key: \"render\",\n    value: function render() {\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsxs(View, {\n          style: styles.upperContainer,\n          children: [_jsx(List.Section, {\n            style: styles.listSection,\n            title: this.props.row.analyzerCode,\n            titleStyle: {\n              color: colors.white\n            },\n            children: null\n          }), _jsx(Switch, {\n            value: this.state.isSwitchOn,\n            onValueChange: this.onToggleSwitch,\n            style: styles.switch\n          })]\n        }), _jsx(ScrollView, {\n          refreshControl: _jsx(RefreshControl, {\n            refreshing: this.state.refreshing\n          }),\n          children: this.state.data.map(function (row, i) {\n            return _jsx(List.Item, {\n              style: styles.listItem,\n              title: row,\n              titleNumberOfLines: 2\n            }, i);\n          })\n        })]\n      });\n    }\n  }]);\n\n  return CommLiveData;\n}(Component);\n\nexport { CommLiveData as default };\nvar styles = StyleSheet.create({\n  upperContainer: {\n    width: \"100%\",\n    backgroundColor: colors.secondary,\n    flexDirection: \"row\"\n  },\n  container: {\n    flex: 1,\n    width: \"100%\",\n    backgroundColor: colors.primary\n  },\n  listItem: {\n    backgroundColor: colors.Third,\n    width: \"100%\",\n    height: 70,\n    borderColor: colors.black,\n    borderStyle: \"solid\",\n    borderWidth: 0.5\n  },\n  listSection: {\n    height: \"80%\",\n    backgroundColor: colors.secondary,\n    flex: 5\n  },\n  switch: {\n    backgroundColor: colors.secondary,\n    flex: 1,\n    height: \"100%\"\n  }\n});","map":{"version":3,"names":["React","Component","List","Provider","PaperProvider","Switch","colors","CommLiveData","props","onToggleSwitch","setState","isSwitchOn","state","componentDidMount","row","active","connection","on","o","console","log","data","JSON","parse","str","analyzerID","data2","push","refreshing","styles","container","upperContainer","listSection","analyzerCode","color","white","switch","map","i","listItem","StyleSheet","create","width","backgroundColor","secondary","flexDirection","flex","primary","Third","height","borderColor","black","borderStyle","borderWidth"],"sources":["H:/Bakalauro projektas/App/CommLinkMobileApp/app/components/CommLiveData.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { StyleSheet, View, ScrollView, RefreshControl } from \"react-native\";\r\nimport { List, Provider as PaperProvider, Switch } from \"react-native-paper\";\r\nimport colors from \"../config/colors\";\r\nexport default class CommLiveData extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      refreshing: true,\r\n      isSwitchOn: false,\r\n    };\r\n  }\r\n\r\n  onToggleSwitch = () => {\r\n    this.setState({ isSwitchOn: !this.state.isSwitchOn });\r\n  };\r\n\r\n  //scrollViewRef = React.useRef();\r\n\r\n  componentDidMount = () => {\r\n    this.setState({ isSwitchOn: this.props.row.active });\r\n    this.props.connection.on(\"ReceiveCommLastData\", (o) => {\r\n      console.log(o);\r\n      this.setState({ data: JSON.parse(o) });\r\n    });\r\n    this.props.connection.on(\"newData\", (str, analyzerID) => {\r\n      console.log(str + \";  \" + analyzerID);\r\n      if (this.props.row.analyzerID == analyzerID) {\r\n        var data2 = this.state.data;\r\n        data2.push(str);\r\n        this.setState({ data: data2 });\r\n      }\r\n      //this.setState({ data: JSON.parse(o) });\r\n    });\r\n    this.state.refreshing = false;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <View style={styles.upperContainer}>\r\n          <List.Section\r\n            style={styles.listSection}\r\n            title={this.props.row.analyzerCode}\r\n            titleStyle={{ color: colors.white }}\r\n            children={null}\r\n          ></List.Section>\r\n          <Switch\r\n            value={this.state.isSwitchOn}\r\n            onValueChange={this.onToggleSwitch}\r\n            style={styles.switch}\r\n          />\r\n        </View>\r\n        <ScrollView\r\n          /*\r\n            ref={this.scrollViewRef}\r\n            onContentSizeChange={() => {\r\n              this.scrollViewRef.current.scrollToEnd({ animated: true });\r\n            }}*/\r\n          refreshControl={\r\n            <RefreshControl\r\n              refreshing={this.state.refreshing}\r\n              //onRefresh={this.onRefresh}\r\n            />\r\n          }\r\n        >\r\n          {this.state.data.map((row, i) => {\r\n            return (\r\n              <List.Item\r\n                key={i}\r\n                style={styles.listItem}\r\n                title={row}\r\n                titleNumberOfLines={2}\r\n              ></List.Item>\r\n            );\r\n          })}\r\n          {}\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  upperContainer: {\r\n    width: \"100%\",\r\n    backgroundColor: colors.secondary,\r\n    flexDirection: \"row\",\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    width: \"100%\",\r\n    backgroundColor: colors.primary,\r\n  },\r\n  listItem: {\r\n    backgroundColor: colors.Third,\r\n    width: \"100%\",\r\n    height: 70,\r\n    borderColor: colors.black,\r\n    borderStyle: \"solid\",\r\n    borderWidth: 0.5,\r\n  },\r\n  listSection: {\r\n    height: \"80%\",\r\n    backgroundColor: colors.secondary,\r\n    flex: 5,\r\n  },\r\n  switch: {\r\n    backgroundColor: colors.secondary,\r\n    flex: 1,\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\n/*\r\n{this.state.data.map((row)=>{\r\n    return(\r\n    <ListItemButton key={row.analyzerID}>\r\n        <ListItemText primary = {row.analyzerCode}>\r\n            <ListItemIcon>\r\n                <DeviceHubIcon/>\r\n            </ListItemIcon>\r\n        </ListItemText>\r\n    </ListItemButton>);\r\n\r\n   {this.state.data.map((row) => {\r\n          return <List.Item key={row.analyzerID} title={row.analyzercode} />;\r\n        })}\r\n\r\n})}*/\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}