{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { List, Provider as PaperProvider } from \"react-native-paper\";\nimport colors from \"../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar CommList = function (_Component) {\n  _inherits(CommList, _Component);\n\n  var _super = _createSuper(CommList);\n\n  function CommList(props) {\n    var _this;\n\n    _classCallCheck(this, CommList);\n\n    _this = _super.call(this, props);\n\n    _this.handleListItemPress = function (row) {\n      _this.props.connection.invoke(\"NeedCommLastData\", row.analyzerID);\n\n      _this.props.navigation.navigate(\"LiveData\", {\n        row: row,\n        connection: _this.props.connection\n      });\n    };\n\n    _this.onRefresh = function () {\n      _this.state.refreshing = true;\n\n      _this.props.connection.invoke(\"NeedAllActiveComms\");\n    };\n\n    _this.componentDidMount = function () {\n      _this.props.connection.on(\"ReceiveAllActiveComs\", function (o) {\n        console.log(o);\n        _this.state.refreshing = false;\n\n        _this.setState({\n          data: JSON.parse(o)\n        });\n\n        _this.props.updateHaveComms(true);\n      });\n    };\n\n    _this.state = {\n      data: [],\n      refreshing: true\n    };\n    return _this;\n  }\n\n  _createClass(CommList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(ScrollView, {\n          refreshControl: _jsx(RefreshControl, {\n            refreshing: this.state.refreshing,\n            onRefresh: this.onRefresh\n          }),\n          children: _jsx(List.Section, {\n            style: styles.listSection,\n            title: \"Active communications\",\n            titleStyle: {\n              color: colors.white\n            },\n            children: this.state.data.map(function (row) {\n              return _jsx(List.Item, {\n                style: styles.listItem,\n                title: row.analyzerCode + \" -> \" + row.ISCode,\n                description: row.analyzerProtocolName + \" \" + row.analyzerTCPIP + \":\" + row.analyzerPort + \" -> \" + row.ISProtocolName + \" \" + row.ISTCPIP + \":\" + row.ISPort,\n                onPress: function onPress() {\n                  return _this2.handleListItemPress(row);\n                }\n              }, row.analyzerID);\n            })\n          })\n        })\n      });\n    }\n  }]);\n\n  return CommList;\n}(Component);\n\nexport { CommList as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: \"100%\"\n  },\n  listItem: {\n    backgroundColor: colors.Third,\n    width: \"100%\",\n    height: 70\n  },\n  listSection: {\n    backgroundColor: colors.secondary,\n    textDecorationColor: colors.white\n  }\n});","map":{"version":3,"names":["React","Component","List","Provider","PaperProvider","colors","CommList","props","handleListItemPress","row","connection","invoke","analyzerID","navigation","navigate","onRefresh","state","refreshing","componentDidMount","on","o","console","log","setState","data","JSON","parse","updateHaveComms","styles","container","listSection","color","white","map","listItem","analyzerCode","ISCode","analyzerProtocolName","analyzerTCPIP","analyzerPort","ISProtocolName","ISTCPIP","ISPort","StyleSheet","create","flex","width","backgroundColor","Third","height","secondary","textDecorationColor"],"sources":["H:/Bakalauro projektas/App/CommLinkMobileApp/app/components/CommList.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  RefreshControl,\r\n  SafeAreaView,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n} from \"react-native\";\r\nimport { List, Provider as PaperProvider } from \"react-native-paper\";\r\nimport colors from \"../config/colors\";\r\nexport default class CommList extends Component {\r\n  handleListItemPress = (row) => {\r\n    this.props.connection.invoke(\"NeedCommLastData\", row.analyzerID);\r\n    this.props.navigation.navigate(\"LiveData\", {\r\n      row: row,\r\n      connection: this.props.connection,\r\n    });\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      refreshing: true,\r\n    };\r\n  }\r\n  /*\r\n  loadData = () => {\r\n    this.props.connection.on(\"ReceiveAllActiveComs\", (o) => {\r\n      console.log(o);\r\n      this.setState({ data: JSON.parse(o) });\r\n    });\r\n  };\r\n\r\n  onRefresh = React.useCallback(() => {\r\n    this.state.refreshing = true;\r\n    this.loadData();\r\n    this.state.refreshing = false;\r\n  }, []);\r\n*/\r\n  onRefresh = () => {\r\n    this.state.refreshing = true;\r\n    this.props.connection.invoke(\"NeedAllActiveComms\");\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.props.connection.on(\"ReceiveAllActiveComs\", (o) => {\r\n      console.log(o);\r\n      this.state.refreshing = false;\r\n      this.setState({ data: JSON.parse(o) });\r\n      this.props.updateHaveComms(true);\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <ScrollView\r\n          refreshControl={\r\n            <RefreshControl\r\n              refreshing={this.state.refreshing}\r\n              onRefresh={this.onRefresh}\r\n            />\r\n          }\r\n        >\r\n          <List.Section\r\n            style={styles.listSection}\r\n            title=\"Active communications\"\r\n            titleStyle={{ color: colors.white }}\r\n          >\r\n            {this.state.data.map((row) => {\r\n              return (\r\n                <List.Item\r\n                  style={styles.listItem}\r\n                  key={row.analyzerID}\r\n                  title={row.analyzerCode + \" -> \" + row.ISCode}\r\n                  description={\r\n                    row.analyzerProtocolName +\r\n                    \" \" +\r\n                    row.analyzerTCPIP +\r\n                    \":\" +\r\n                    row.analyzerPort +\r\n                    \" -> \" +\r\n                    row.ISProtocolName +\r\n                    \" \" +\r\n                    row.ISTCPIP +\r\n                    \":\" +\r\n                    row.ISPort\r\n                  }\r\n                  onPress={() => this.handleListItemPress(row)}\r\n                />\r\n              );\r\n            })}\r\n          </List.Section>\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    width: \"100%\",\r\n  },\r\n  listItem: {\r\n    backgroundColor: colors.Third,\r\n    width: \"100%\",\r\n    height: 70,\r\n  },\r\n  listSection: {\r\n    backgroundColor: colors.secondary,\r\n    textDecorationColor: colors.white,\r\n  },\r\n});\r\n\r\n/*\r\n{this.state.data.map((row)=>{\r\n    return(\r\n    <ListItemButton key={row.analyzerID}>\r\n        <ListItemText primary = {row.analyzerCode}>\r\n            <ListItemIcon>\r\n                <DeviceHubIcon/>\r\n            </ListItemIcon>\r\n        </ListItemText>\r\n    </ListItemButton>);\r\n\r\n   {this.state.data.map((row) => {\r\n          return <List.Item key={row.analyzerID} title={row.analyzercode} />;\r\n        })}\r\n\r\n})}*/\r\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;AASA,SAASC,IAAT,EAAeC,QAAQ,IAAIC,aAA3B,QAAgD,oBAAhD;AACA,OAAOC,MAAP;;;IACqBC,Q;;;;;EASnB,kBAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACjB,0BAAMA,KAAN;;IADiB,MARnBC,mBAQmB,GARG,UAACC,GAAD,EAAS;MAC7B,MAAKF,KAAL,CAAWG,UAAX,CAAsBC,MAAtB,CAA6B,kBAA7B,EAAiDF,GAAG,CAACG,UAArD;;MACA,MAAKL,KAAL,CAAWM,UAAX,CAAsBC,QAAtB,CAA+B,UAA/B,EAA2C;QACzCL,GAAG,EAAEA,GADoC;QAEzCC,UAAU,EAAE,MAAKH,KAAL,CAAWG;MAFkB,CAA3C;IAID,CAEkB;;IAAA,MAqBnBK,SArBmB,GAqBP,YAAM;MAChB,MAAKC,KAAL,CAAWC,UAAX,GAAwB,IAAxB;;MACA,MAAKV,KAAL,CAAWG,UAAX,CAAsBC,MAAtB,CAA6B,oBAA7B;IACD,CAxBkB;;IAAA,MA0BnBO,iBA1BmB,GA0BC,YAAM;MACxB,MAAKX,KAAL,CAAWG,UAAX,CAAsBS,EAAtB,CAAyB,sBAAzB,EAAiD,UAACC,CAAD,EAAO;QACtDC,OAAO,CAACC,GAAR,CAAYF,CAAZ;QACA,MAAKJ,KAAL,CAAWC,UAAX,GAAwB,KAAxB;;QACA,MAAKM,QAAL,CAAc;UAAEC,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWN,CAAX;QAAR,CAAd;;QACA,MAAKb,KAAL,CAAWoB,eAAX,CAA2B,IAA3B;MACD,CALD;IAMD,CAjCkB;;IAEjB,MAAKX,KAAL,GAAa;MACXQ,IAAI,EAAE,EADK;MAEXP,UAAU,EAAE;IAFD,CAAb;IAFiB;EAMlB;;;;WA4BD,kBAAS;MAAA;;MACP,OACE,KAAC,IAAD;QAAM,KAAK,EAAEW,MAAM,CAACC,SAApB;QAAA,UACE,KAAC,UAAD;UACE,cAAc,EACZ,KAAC,cAAD;YACE,UAAU,EAAE,KAAKb,KAAL,CAAWC,UADzB;YAEE,SAAS,EAAE,KAAKF;UAFlB,EAFJ;UAAA,UAQE,KAAC,IAAD,CAAM,OAAN;YACE,KAAK,EAAEa,MAAM,CAACE,WADhB;YAEE,KAAK,EAAC,uBAFR;YAGE,UAAU,EAAE;cAAEC,KAAK,EAAE1B,MAAM,CAAC2B;YAAhB,CAHd;YAAA,UAKG,KAAKhB,KAAL,CAAWQ,IAAX,CAAgBS,GAAhB,CAAoB,UAACxB,GAAD,EAAS;cAC5B,OACE,KAAC,IAAD,CAAM,IAAN;gBACE,KAAK,EAAEmB,MAAM,CAACM,QADhB;gBAGE,KAAK,EAAEzB,GAAG,CAAC0B,YAAJ,GAAmB,MAAnB,GAA4B1B,GAAG,CAAC2B,MAHzC;gBAIE,WAAW,EACT3B,GAAG,CAAC4B,oBAAJ,GACA,GADA,GAEA5B,GAAG,CAAC6B,aAFJ,GAGA,GAHA,GAIA7B,GAAG,CAAC8B,YAJJ,GAKA,MALA,GAMA9B,GAAG,CAAC+B,cANJ,GAOA,GAPA,GAQA/B,GAAG,CAACgC,OARJ,GASA,GATA,GAUAhC,GAAG,CAACiC,MAfR;gBAiBE,OAAO,EAAE;kBAAA,OAAM,MAAI,CAAClC,mBAAL,CAAyBC,GAAzB,CAAN;gBAAA;cAjBX,GAEOA,GAAG,CAACG,UAFX,CADF;YAqBD,CAtBA;UALH;QARF;MADF,EADF;IA0CD;;;;EAtFmCX,S;;SAAjBK,Q;AAyFrB,IAAMsB,MAAM,GAAGe,UAAU,CAACC,MAAX,CAAkB;EAC/Bf,SAAS,EAAE;IACTgB,IAAI,EAAE,CADG;IAETC,KAAK,EAAE;EAFE,CADoB;EAK/BZ,QAAQ,EAAE;IACRa,eAAe,EAAE1C,MAAM,CAAC2C,KADhB;IAERF,KAAK,EAAE,MAFC;IAGRG,MAAM,EAAE;EAHA,CALqB;EAU/BnB,WAAW,EAAE;IACXiB,eAAe,EAAE1C,MAAM,CAAC6C,SADb;IAEXC,mBAAmB,EAAE9C,MAAM,CAAC2B;EAFjB;AAVkB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}